AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Type: String
  JenkinsInstanceType:
    Type: String
    Default: t3.small
  JenkinsAllowedCIDR:
    Type: String
  JenkinsSSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  # AMI NAME: ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20200716
  AMIRegionMap:
    ap-northeast-1:
      AMI: ami-067373c206eab18c5
    ap-northeast-2:
      AMI: ami-09ca223c409420549
    ap-south-1:
      AMI: ami-0835240c6a4146612
    ap-southeast-1:
      AMI: ami-06fb4227dd8528486
    ap-southeast-2:
      AMI: ami-0e6449745600ac1da
    ca-central-1:
      AMI: ami-0419d42438dfe5215
    eu-central-1:
      AMI: ami-079024c517d22af5b
    eu-north-1:
      AMI: ami-0b4a48196ce7bed7b
    eu-west-1:
      AMI: ami-0127d62154efde733
    eu-west-2:
      AMI: ami-0fb673bc6ff8fc282
    eu-west-3:
      AMI: ami-03ceeb0f46ee38ce7
    sa-east-1:
      AMI: ami-0ccc65ecf88e9fe1a
    us-east-1:
      AMI: ami-0d57c0143330e1fa7
    us-east-2:
      AMI: ami-01237fce26136c8cc
    us-west-1:
      AMI: ami-0b606d7d59c68a5e0
    us-west-2:
      AMI: ami-0bf357e4bc8a8b9e3

Resources:

  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
      GroupName: jenkins-sg
      GroupDescription: Security group for the jenkins server
      VpcId: !ImportValue CapstoneVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref JenkinsAllowedCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref JenkinsAllowedCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref JenkinsAllowedCIDR

  JenkinsEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref JenkinsEC2Instance
      Tags:
        - Key: Environment
          Value: !Ref Environment

  JenkinsEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
      ImageId:
        Fn::FindInMap:
          - AMIRegionMap
          - !Ref AWS::Region
          - AMI
      InstanceType: !Ref JenkinsInstanceType
      SubnetId: !ImportValue CapstonePublicSubnet1ID
      UserData: !Base64 |
        #!/bin/bash
        set -e
        if [ ! -f /var/swap.1 ]; then
          dd if=/dev/zero of=/var/swap.1 bs=1M count=8192
          chmod 600 /var/swap.1
          mkswap /var/swap.1
          swapon /var/swap.1
          echo '/var/swap.1 swap swap defaults 0 0' >> /etc/fstab
        fi
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -y
        apt-get dist-upgrade -y
        apt-get install -y unzip tidy curl openssl nginx openjdk-8-jdk apt-transport-https ca-certificates gnupg-agent software-properties-common
        rm -f /usr/local/bin/hadolint
        curl 'https://github.com/hadolint/hadolint/releases/download/v1.18.0/hadolint-Linux-x86_64' -o /usr/local/bin/hadolint
        chmod +x /usr/local/bin/hadolint
        curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        curl -L "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
        chmod +x /usr/local/bin/kubectl
        curl 'https://pkg.jenkins.io/debian-stable/jenkins.io.key' | apt-key add -
        echo 'deb https://pkg.jenkins.io/debian-stable binary/' > /etc/apt/sources.list.d/jenkins.list
        curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt-get update -y
        apt-get install -y jenkins docker-ce docker-ce-cli containerd.io
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        if [ -d /usr/local/aws-cli/v2/current ]; then
          ./aws/install --update
        else
          ./aws/install
        fi
        rm -fr awscliv2.zip aws 
        if [ ! -f /etc/nginx/tls/selfsigned_cert.key ]; then
          mkdir -p /etc/nginx/tls
          export EC2_PUBLIC_IP="$(curl 'http://169.254.169.254/latest/meta-data/public-ipv4' 2>/dev/null)"
          export EC2_PUBLIC_DNS="$(curl 'http://169.254.169.254/latest/meta-data/public-hostname' 2>/dev/null)"
          export EC2_PRIVATE_IP="$(curl 'http://169.254.169.254/latest/meta-data/local-ipv4' 2>/dev/null)"
          export EC2_PRIVATE_DNS="$(curl 'http://169.254.169.254/latest/meta-data/local-hostname' 2>/dev/null)"
          (cat /etc/ssl/openssl.cnf; printf "[SAN]\nsubjectAltName=DNS:$EC2_PUBLIC_DNS,DNS:$EC2_PRIVATE_DNS,IP:$EC2_PUBLIC_IP,IP:$EC2_PRIVATE_IP") \
            | openssl req -newkey rsa:4096 -x509 -nodes -keyout /etc/nginx/tls/selfsigned_cert.key \
              -new -out /etc/nginx/tls/selfsigned_cert.crt -subj "/CN=$EC2_PUBLIC_DNS" \
              -reqexts SAN -extensions SAN -sha256 -days 365 -config /dev/stdin
          chmod 600 /etc/nginx/tls/selfsigned_cert.key
        fi
        cat >/etc/nginx/sites-available/default <<EOF
        server {
          listen 80 default_server;
          server_name _;
          return 301 https://\$host\$request_uri;
        }
        server {
          listen 443 ssl default_server;
          ssl_certificate /etc/nginx/tls/selfsigned_cert.crt;
          ssl_certificate_key /etc/nginx/tls/selfsigned_cert.key;
          ssl_protocols TLSv1.1 TLSv1.2;
          ssl_ciphers HIGH:!aNULL:!MD5;
          root /var/www/html;
          server_name _;
          location / {
            proxy_set_header Host \$host:\$server_port;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_pass http://127.0.0.1:8080;
            proxy_read_timeout 90;
            proxy_redirect http://127.0.0.1:8080 https://\$host;
          }
        }
        EOF
        mkdir -p /opt/anchore
        curl 'https://docs.anchore.com/current/docs/engine/quickstart/docker-compose.yaml' -o /opt/anchore/docker-compose.yaml
        # Source for systemd config: https://stackoverflow.com/questions/43671482/how-to-run-docker-compose-up-d-at-system-start-up
        cat >/etc/systemd/system/docker-compose-anchore.service <<EOF
        [Unit]
        Description=Docker Compose Anchore Service
        Requires=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        WorkingDirectory=/opt/anchore
        ExecStart=/usr/local/bin/docker-compose up -d
        ExecStop=/usr/local/bin/docker-compose down
        TimeoutStartSec=0

        [Install]
        WantedBy=multi-user.target
        EOF
        systemctl enable docker-compose-anchore
        apt-get autoremove -y
        apt-get clean
        reboot
      SecurityGroupIds:
        - !Ref JenkinsSecurityGroup
      KeyName: !Ref JenkinsSSHKeyName
      SourceDestCheck: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '30'
            DeleteOnTermination: 'true'
            Encrypted: 'true'

Outputs:
  JenkinsIP:
    Value: !GetAtt JenkinsEC2Instance.PublicIp
  JenkinsDNS:
    Value: !GetAtt JenkinsEC2Instance.PublicDnsName
  JenkinsHTTPS:
    Value:
      Fn::Join:
        - ""
        - - "https://"
          - !GetAtt JenkinsEC2Instance.PublicDnsName
          - "/"
